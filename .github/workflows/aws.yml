name: Deploy to EC2

on:
  push:
    branches:
      - master  # "master" 브랜치에 푸시되면 실행

env:
  AWS_REGION: ap-southeast-2                 # EC2 리전 (예시: us-west-2)
  EC2_INSTANCE: 52.62.100.186           # EC2 퍼블릭 IP 주소
  EC2_USER: ubuntu                      # EC2 사용자
  SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}  # GitHub Secrets에 저장된 SSH 비공개 키
  DOCKER_IMAGE: filmus-backend          # 빌드한 Docker 이미지 이름
  DOCKER_TAG: latest                    # Docker 이미지 태그 (예시: latest)
  APP_DIR: /home/ubuntu/film-backend/backend          # EC2 상의 애플리케이션 디렉토리
  PORT: 80                              # EC2에서 사용할 포트

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

    - name: Build Docker image
      run: |
        # backend 디렉토리로 이동하여 Dockerfile을 빌드
        docker build -t $DOCKER_IMAGE:$DOCKER_TAG .

    - name: Copy Docker image to EC2 instance
      run: |
        # EC2에 Docker 이미지 복사
        scp -i ${{ secrets.AWS_SSH_PRIVATE_KEY }} -o StrictHostKeyChecking=no $DOCKER_IMAGE:$DOCKER_TAG $EC2_USER@$EC2_INSTANCE:$APP_DIR

    - name: Deploy Docker container to EC2
      run: |
        ssh -i ${{ secrets.AWS_SSH_PRIVATE_KEY }} -o StrictHostKeyChecking=no $EC2_USER@$EC2_INSTANCE << 'EOF'
          # EC2에서 기존 Docker 컨테이너 중지
          docker stop filmus-backend-container || true
          docker rm filmus-backend-container || true
          
          # 새로운 Docker 컨테이너 실행
          docker run -d -p $PORT:8080 --name filmus-backend-container $DOCKER_IMAGE:$DOCKER_TAG
        EOF

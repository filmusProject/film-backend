name: CI/CD – filmus-backend

on:
  push:
    branches: [ master ]          # master 브랜치 푸시 시 실행

env:
  IMAGE_REPO: ghcr.io/taco-recipe/filmus-backend   # → GitHub Container Registry
  DOCKER_BUILDKIT: 1                               # 빌드 속도 개선

jobs:
  ####################################################################
  # 1)  JAR 빌드  →  컨테이너 이미지 생성  →  GHCR 푸시
  ####################################################################
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Test & build spring-boot JAR
        run: ./gradlew bootJar
        working-directory: backend          # ← gradlew 위치가 backend/

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}   # Settings ▸ Secrets ▸ GHCR_TOKEN

      - name: Build Docker image
        run: |
          TAG=${{ github.sha }}
          docker build \
            -f backend/Dockerfile \
            --build-arg JAR_FILE=backend/build/libs/filmus-backend.jar \
            -t "$IMAGE_REPO:$TAG" \
            -t "$IMAGE_REPO:latest" .

      - name: Push image to GHCR
        run: |
          docker push "$IMAGE_REPO:${{ github.sha }}"
          docker push "$IMAGE_REPO:latest"

  ####################################################################
  # 2)  EC2에 SSH 접속해서 docker-compose 업데이트
  ####################################################################
  deploy:
    needs: build-and-push          # 이미지 빌드가 끝나야 실행
    runs-on: ubuntu-latest

    steps:
      - name: SSH & deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}          # ← 퍼블릭 IP 또는 DNS
          username: ubuntu                           # Amazon Linux 이면 ec2-user
          key:      ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          timeout: 60s
          script: |
            set -e
            echo "✅ SSH 연결 성공, 백엔드 배포 시작"

            # 최신 이미지 내려받고 재시작
            export IMAGE_REPO="${{ env.IMAGE_REPO }}"
            docker compose -f /srv/filmus/docker-compose.yml pull
            docker compose -f /srv/filmus/docker-compose.yml up -d --remove-orphans

            # 하루 넘은 dangling 이미지 정리
            docker image prune -f --filter "until=24h"
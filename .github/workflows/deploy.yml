name: CI/CD – filmus-backend

on:
  push:
    branches: [ master ]          # 배포 브랜치

env:
<<<<<<< HEAD
  AWS_REGION: ap-southeast-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: filmus-backend
  IMAGE_TAG: latest

  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ubuntu
  APP_DIR: /home/ubuntu/app
=======
  IMAGE_REPO: ghcr.io/taco-recipe/filmus-backend   # 또는 ECR, Docker Hub
  DOCKER_BUILDKIT: 1
>>>>>>> 7c5ee70 (feat : movie nlp search에서 nlp 서버 컨트롤을 추가)

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Test & build JAR
        run: ./gradlew :backend:bootJar

<<<<<<< HEAD
    - name: Build JAR
      run: |
        chmod +x backend/gradlew
        ./backend/gradlew -p backend clean bootJar --no-daemon

    # 3) ECR 로그인
    - name: Login to ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
=======
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}   # repo → Settings → Secrets
>>>>>>> 7c5ee70 (feat : movie nlp search에서 nlp 서버 컨트롤을 추가)

      - name: Build image
        run: |
          TAG=${{ github.sha }}
          docker build \
            -f backend/Dockerfile \
            --build-arg JAR_FILE=backend/build/libs/filmus-backend.jar \
            -t $IMAGE_REPO:$TAG \
            -t $IMAGE_REPO:latest .

      - name: Push image
        run: |
          docker push $IMAGE_REPO:${{ github.sha }}
          docker push $IMAGE_REPO:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH & deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            export IMAGE_REPO=${{ env.IMAGE_REPO }}
            docker compose -f /srv/filmus/docker-compose.yml pull
            docker compose -f /srv/filmus/docker-compose.yml up -d --remove-orphans
            docker image prune -f --filter "until=24h"